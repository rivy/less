# Makefile for `less`
# `embcc32` (Embarcadero Borland C++ free command line tools); CMD/PowerShell host
# GNU make (gmake) compatible; ref: <https://www.gnu.org/software/make/manual>
# Copyright (C) 2020 ~ Roy Ivy III <rivy.dev@gmail.com>; MIT+Apache-2.0 license

# spell-checker:ignore () INCDIRS LIBDIRS bcc32 embcc32 embcc psdk
#
# spell-checker:ignore (targets) distclean realclean vclean veryclean
# spell-checker:ignore (make) abspath firstword gmake ifeq ifndef ifneq lastword undefine vclean veryclean
#
# spell-checker:ignore (acronyms/names) Borland Borland's LLVM MSVC MinGW POSIX VCvars
# spell-checker:ignore (flags/options) DDEBUG DNDEBUG NDEBUG Werror Wextra Xclang defaultlib dumpmachine flto flto-visibility-public-std libcmt nologo nothrow
# spell-checker:ignore (jargon) multilib
# spell-checker:ignore (shell/win) COMSPEC SystemDrive SystemRoot findstr findstring windir
# spell-checker:ignore (utils) ilink nmake printf
# spell-checker:ignore (vars) BQUOTE CFLAGS CPPFLAGS CXXFLAGS DEFINETYPE DQUOTE EXEEXT LDFLAGS LIBDIR LIBPATH MAKEDIR OBJDEP SHELLSTATUS devnull mkfile
# spell-checker:ignore () brac cmdbuf forwback funcs ifile lessecho lesskey linenum lsystem optfunc opttbl stdext ttyin

####

OSID := $(or $(and $(filter .exe,$(patsubst %.exe,.exe,$(subst $() $(),_,${SHELL}))),$(filter win,${OS:Windows_NT=win})),nix)## OSID == [nix,win]
# for Windows OS, set SHELL to `%ComSpec%` or `cmd` (note: environment/${OS}=="Windows_NT" for XP, 2000, Vista, 7, 10 ...)
# * `make` may otherwise use an incorrect shell (eg, `bash`), if found; "syntax error: unexpected end of file" error output is indicative
ifeq (${OSID},win)
# use case and location fallbacks; note: assumes *no spaces* within the path values specified by ${ComSpec}, ${SystemRoot}, or ${windir}
COMSPEC := $(or ${ComSpec},${COMSPEC},${comspec})
SystemRoot := $(or ${SystemRoot},${SYSTEMROOT},${systemroot},${windir})
SHELL := $(firstword $(wildcard ${COMSPEC} ${SystemRoot}/System32/cmd.exe) cmd)
endif

#### Start of system configuration section. ####

CC := embcc32

CXX := ${CC}
LD := ilink32
STRIP := $()

# * find CC base directory (for include and library directories, as needed)
CC_BASEDIR := $(subst /,\,$(abspath $(firstword $(shell scoop which ${CC} 2>NUL) $(shell where ${CC} 2>NUL))\..\..))

CFLAGS := -q -O2 -TWC -P-c -v- -d -f- -vi -I.
CFLAGS_COMPILE_ONLY := -c

LIBDIRS := "${CC_BASEDIR}\lib\win32c\release";"${CC_BASEDIR}\lib\win32c\release\psdk"

LD_INIT_OBJ := "${CC_LIBDIR}\c0x32.obj"

LDFLAGS := -q -Tpe -v- -ap -c -x -V4.0 -GF:AGGRESSIVE -L${LIBDIRS} ${LD_INIT_OBJ}

LIBS := import32.lib cw32.lib

#### End of system configuration section. ####

# # Set SHELL to `cmd` for Windows OS (note: environment/${OS}=="Windows_NT" for XP, 2000, Vista, 7, 10 ...)
# # * `make` may otherwise use an incorrect shell (eg, `bash`), if found; "syntax error: unexpected end of file" error output is indicative
# ifeq (${OS},Windows_NT)
# 	# use case and location fallbacks; note: assumes *no spaces* within ${ComSpec}, ${SystemRoot}, or ${windir}
# 	COMSPEC := $(or ${ComSpec},${COMSPEC},${comspec})
# 	SystemRoot := $(or ${SystemRoot},${SYSTEMROOT},${systemroot},${windir})
# 	SHELL := $(firstword $(wildcard ${COMSPEC} ${SystemRoot}/System32/cmd.exe) cmd)
# endif
# # $(info SHELL=${SHELL})

####

%.obj: %.c
	${CC} ${CFLAGS_COMPILE_ONLY} ${CPPFLAGS} ${CFLAGS} "$<"

OBJ = \
	main.obj screen.obj brac.obj ch.obj charset.obj cmdbuf.obj \
	command.obj cvt.obj decode.obj edit.obj filename.obj forwback.obj \
	help.obj ifile.obj input.obj jump.obj line.obj linenum.obj \
	lsystem.obj mark.obj optfunc.obj option.obj opttbl.obj os.obj \
	output.obj pattern.obj position.obj prompt.obj search.obj signal.obj \
	tags.obj ttyin.obj version.obj regexp.obj

all: less lesskey lessecho

less: ${OBJ}
	${LD} ${LDFLAGS} $^, "$@",,${LIBS}

lesskey: lesskey.obj version.obj
	${LD} ${LDFLAGS} $^, "$@",,${LIBS}

lessecho: lessecho.obj version.obj
	${LD} ${LDFLAGS} $^, "$@",,${LIBS}

defines.h: defines.wn
	-@if EXIST "defines.h" del "defines.h" && echo "defines.h" removed
	-copy "defines.wn" "defines.h" >NUL

${OBJ}: less.h defines.h funcs.h cmd.h

clean:
	-@if EXIST "*.obj" del "*.obj" && echo "*.obj" removed
	-@if EXIST "*.il?" del "*.il?" && echo "*.il?" removed
	-@if EXIST "*.tds" del "*.tds" && echo "*.tds" removed
	-@if EXIST "defines.h" del "defines.h" && echo "defines.h" removed
	-@if EXIST "less.exe" del "less.exe" && echo "less.exe" removed
	-@if EXIST "lessecho.exe" del "lessecho.exe" && echo "lessecho.exe" removed
	-@if EXIST "lesskey.exe" del "lesskey.exe" && echo "lesskey.exe" removed

build: all
compile: ${OBJ}
realclean: clean
rebuild: clean build
veryclean: realclean
