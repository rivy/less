# spell-checker:ignore (make) EXEEXT LDFLAGS SHELLSTATUS addsuffix addprefix devnull falsey ifeq ; (names/vars) msdosdjgpp lessecho lesskey scrsize OSID POSIX

AUX_names := lessecho lesskey
AUX_skips := scrsize## `scrsize` is POSIX only

$(call %debug_var,AUX_names)
$(call %debug_var,AUX_skips)

####

AUX_targets := $(addprefix ${OUT_DIR_bin}/,$(addsuffix ${EXEEXT},${AUX_names}))
OBJ_files := $(filter-out $(addprefix ${OUT_DIR_obj}/,$(addsuffix .${O},${AUX_names} ${AUX_skips})),${OBJ_files})

$(call %debug_var,AUX_targets)
$(call %debug_var,OBJ_files)

####

# ref: <https://stackoverflow.com/questions/6877238/what-is-the-windows-equivalent-of-the-diff-command> @@ <https://archive.is/dKoTB>
# NOTE: after execution, ${.SHELLSTATUS} == 0 if files are identical; 1 if files are different; 2 if error
ifeq (${OSID},win)
%diff_shell_s = "${SystemRoot}\System32\fc" $(call %map,%shell_quote,$(call %map,%as_win_path,${1} ${2})) 2> ${devnull}
else
%diff_shell_s = diff ${1} ${2} 2> ${devnull}
endif

####

DEFINE_EXT := $(if $(filter-out i586-pc-msdosdjgpp-gcc,${CC}),wn,ds)

DEFINE_DIFFERS := ${false}
DEFINE_DIFF := $(shell $(call %diff_shell_s,${SRC_DIR}/defines.h,${SRC_DIR}/defines.${DEFINE_EXT}))
# * if ${.SHELLSTATUS} == 0, there is no difference (${DEFINE_DIFF} may contain other, extraneous, text)
# * if ${.SHELLSTATUS} == 1, then ${DEFINE_DIFF} contains the difference text
$(call %debug_var,.SHELLSTATUS)
ifeq (${.SHELLSTATUS},0)
DEFINE_DIFF := $()
else
DEFINE_DIFFERS := ${true}
endif
$(call %debug_var,DEFINE_EXT)
$(call %debug_var,DEFINE_DIFF)
$(call %debug_var,DEFINE_DIFFERS)

ifneq (${DEFINE_DIFFERS},${false})
$(call %rm_files,${SRC_DIR}/defines.h)
$(call %info,previous (incompatible) '${SRC_DIR}/defines.h' removed.)
endif

####

${SRC_DIR}/defines.h: ${SRC_DIR}/defines.${DEFINE_EXT} $(filter-out ${SRC_DIR}/defines.h,${DEPS_common})
	@${CP} $(call %map,%shell_quote,$(call %map,%as_win_path,$< $@)) >${devnull}
	@$(call %touch_shell_s,$(call %shell_quote,$@))
	@${ECHO} $(call %shell_escape,$(call %info_text,created '$@' from '$<'.))

${AUX_targets}: ${OUT_DIR_bin}/%${EXEEXT}: ${OUT_DIR_obj}/%.${O} ${OUT_DIR_obj}/version.${O} ${DEPS_common} | ${OUT_DIR_bin}
	$(call %link,${LDFLAGS},$(call %shell_quote,$@),$(call %map,%shell_quote,$< ${OUT_DIR_obj}/version.${O}),$(call %map,%shell_quote,$(call %filter_by_stem,$@,${TEST_REZ_files})),$(call %LDX_flags,$(if $(call %is_gui,$@),windows,${SUBSYSTEM})))
	$(if $(and ${STRIP},$(call %is_falsey,${DEBUG})),${STRIP} $(call %shell_quote,$@),)
	@${ECHO} $(call %shell_escape,$(call %success_text,made '$@'.))

####

all: aux

all_phony_targets += aux
# aux: build ${AUX_targets} ## Build auxillary executables (`lessecho` and `lesskey`)
aux: ${AUX_targets} ## Build auxillary executables (`lessecho` and `lesskey`)
