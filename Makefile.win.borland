# Makefile for less.
# Windows version
# Borland C++ 5.5.1 free command line tools

# spell-checker:ignore (targets) distclean realclean vclean veryclean
# spell-checker:ignore (make) abspath firstword ifeq ifndef ifneq lastword undefine vclean veryclean
#
# spell-checker:ignore (acronyms/names) Borland Borland's LLVM MSVC MinGW POSIX VCvars
# spell-checker:ignore (flags/options) DDEBUG DNDEBUG NDEBUG Werror Wextra Xclang defaultlib dumpmachine flto flto-visibility-public-std libcmt nologo nothrow
# spell-checker:ignore (jargon) multilib
# spell-checker:ignore (shell/win) COMSPEC SystemDrive SystemRoot findstr findstring windir
# spell-checker:ignore (utils) ilink nmake printf
# spell-checker:ignore (vars) BQUOTE CFLAGS CPPFLAGS CXXFLAGS DEFINETYPE DQUOTE EXEEXT LDFLAGS LIBDIR LIBPATH MAKEDIR OBJDEP SHELLSTATUS devnull mkfile
# spell-checker:ignore () brac cmdbuf forwback funcs ifile lessecho lesskey linenum lsystem optfunc opttbl stdext ttyin

#### Start of system configuration section. ####
#
# Borland's make knows its own location in the
# filesystem.
#

CC = bcc32
LIBDIR = $(MAKEDIR)\..\lib

CFLAGS = -O2 -w-pro -TWC -P-c -v- -d -f- -ff- -vi
LDFLAGS = -Tpe -v- -ap -c -x -V4.0 -GF:AGGRESSIVE
LD = ilink32
LIBS = ${LIBDIR}\import32.lib ${LIBDIR}\cw32.lib

#### End of system configuration section. ####

# Set SHELL to `cmd` for Windows OS (note: environment/${OS}=="Windows_NT" for XP, 2000, Vista, 7, 10 ...)
# * `make` may otherwise use an incorrect shell (eg, `bash`), if found; "syntax error: unexpected end of file" error output is indicative
ifeq (${OS},Windows_NT)
	# use case and location fallbacks; note: assumes *no spaces* within ${ComSpec}, ${SystemRoot}, or ${windir}
	COMSPEC := $(or ${ComSpec},${COMSPEC},${comspec})
	SystemRoot := $(or ${SystemRoot},${SYSTEMROOT},${systemroot},${windir})
	SHELL := $(firstword $(wildcard ${COMSPEC} ${SystemRoot}/System32/cmd.exe) cmd)
endif
# $(info SHELL=${SHELL})

####

#
# This rule allows us to supply the necessary -D options
# in addition to whatever the user asks for.
#
.c.obj:
	${CC} -c -I. ${CPPFLAGS} ${CFLAGS} $<

OBJ = \
	main.obj screen.obj brac.obj ch.obj charset.obj cmdbuf.obj \
	command.obj cvt.obj decode.obj edit.obj filename.obj forwback.obj \
	help.obj ifile.obj input.obj jump.obj line.obj linenum.obj \
	lsystem.obj mark.obj optfunc.obj option.obj opttbl.obj os.obj \
	output.obj pattern.obj position.obj prompt.obj search.obj signal.obj \
	tags.obj ttyin.obj version.obj regexp.obj

all: less lesskey lessecho

#
# This is really horrible, but the command line is too long for
# MS-DOS if we try to link ${OBJ}.
#
less: ${OBJ}
	${LD} ${LDFLAGS} ${LIBDIR}\c0x32.obj $**, $@,,${LIBS}

lesskey: lesskey.obj version.obj
	${LD} ${LDFLAGS} ${LIBDIR}\c0x32.obj $**, $@,,${LIBS}

lessecho: lessecho.obj version.obj
	${LD} ${LDFLAGS} ${LIBDIR}\c0x32.obj $**, $@,,${LIBS}

defines.h: defines.wn
	-del defines.h
	-copy defines.wn defines.h

${OBJ}: less.h defines.h funcs.h cmd.h

clean:
	-del *.obj
	-del *.il?
	-del *.tds
	-del defines.h
	-del less.exe
	-del lesskey.exe
	-del lessecho.exe

build: all
compile: ${OBJ}
realclean: clean
rebuild: clean build
veryclean: realclean
